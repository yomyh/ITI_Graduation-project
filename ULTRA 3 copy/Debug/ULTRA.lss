
ULTRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002c24  00002cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007c  0080007c  00002cd4  2**0
                  ALLOC
  3 .stab         00002118  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ca4  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <main>
      8a:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e7       	ldi	r22, 0x74	; 116
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
#include "std.h"
void DIO_vsetPINDir(c8 portname,c8 pinnumber,c8 direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vsetPINDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vsetPINDir+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	82 34       	cpi	r24, 0x42	; 66
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <DIO_vsetPINDir+0x2a>
     cc6:	44 c0       	rjmp	.+136    	; 0xd50 <DIO_vsetPINDir+0xb2>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	23 34       	cpi	r18, 0x43	; 67
     cce:	31 05       	cpc	r19, r1
     cd0:	34 f4       	brge	.+12     	; 0xcde <DIO_vsetPINDir+0x40>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	81 34       	cpi	r24, 0x41	; 65
     cd8:	91 05       	cpc	r25, r1
     cda:	71 f0       	breq	.+28     	; 0xcf8 <DIO_vsetPINDir+0x5a>
     cdc:	bc c0       	rjmp	.+376    	; 0xe56 <DIO_vsetPINDir+0x1b8>
     cde:	2c 81       	ldd	r18, Y+4	; 0x04
     ce0:	3d 81       	ldd	r19, Y+5	; 0x05
     ce2:	23 34       	cpi	r18, 0x43	; 67
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <DIO_vsetPINDir+0x4c>
     ce8:	5f c0       	rjmp	.+190    	; 0xda8 <DIO_vsetPINDir+0x10a>
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	84 34       	cpi	r24, 0x44	; 68
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_vsetPINDir+0x58>
     cf4:	85 c0       	rjmp	.+266    	; 0xe00 <DIO_vsetPINDir+0x162>
     cf6:	af c0       	rjmp	.+350    	; 0xe56 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f4       	brne	.+40     	; 0xd26 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_vsetPINDir+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_vsetPINDir+0x7a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	98 c0       	rjmp	.+304    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_vsetPINDir+0xa6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_vsetPINDir+0xa2>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	83 c0       	rjmp	.+262    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     d56:	a7 e3       	ldi	r26, 0x37	; 55
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e3       	ldi	r30, 0x37	; 55
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_vsetPINDir+0xd6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_vsetPINDir+0xd2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	6c c0       	rjmp	.+216    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     d7e:	a7 e3       	ldi	r26, 0x37	; 55
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_vsetPINDir+0xfe>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_vsetPINDir+0xfa>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	57 c0       	rjmp	.+174    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	a1 f4       	brne	.+40     	; 0xdd6 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     dae:	a4 e3       	ldi	r26, 0x34	; 52
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_vsetPINDir+0x12e>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_vsetPINDir+0x12a>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_vsetPINDir+0x156>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_vsetPINDir+0x152>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vsetPINDir+0x186>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vsetPINDir+0x182>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_vsetPINDir+0x1ae>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_vsetPINDir+0x1aa>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_write>:


void DIO_write(c8 portname,c8 pinnumber,c8 outputvalue)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_write+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_write+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3d 83       	std	Y+5, r19	; 0x05
     e82:	2c 83       	std	Y+4, r18	; 0x04
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	82 34       	cpi	r24, 0x42	; 66
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_write+0x2a>
     e8e:	44 c0       	rjmp	.+136    	; 0xf18 <DIO_write+0xb2>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	23 34       	cpi	r18, 0x43	; 67
     e96:	31 05       	cpc	r19, r1
     e98:	34 f4       	brge	.+12     	; 0xea6 <DIO_write+0x40>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 34       	cpi	r24, 0x41	; 65
     ea0:	91 05       	cpc	r25, r1
     ea2:	71 f0       	breq	.+28     	; 0xec0 <DIO_write+0x5a>
     ea4:	bc c0       	rjmp	.+376    	; 0x101e <DIO_write+0x1b8>
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	23 34       	cpi	r18, 0x43	; 67
     eac:	31 05       	cpc	r19, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <DIO_write+0x4c>
     eb0:	5f c0       	rjmp	.+190    	; 0xf70 <DIO_write+0x10a>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	84 34       	cpi	r24, 0x44	; 68
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_write+0x58>
     ebc:	85 c0       	rjmp	.+266    	; 0xfc8 <DIO_write+0x162>
     ebe:	af c0       	rjmp	.+350    	; 0x101e <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	a1 f4       	brne	.+40     	; 0xeee <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     ec6:	ab e3       	ldi	r26, 0x3B	; 59
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e3       	ldi	r30, 0x3B	; 59
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_write+0x7e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_write+0x7a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	98 c0       	rjmp	.+304    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_write+0xa6>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_write+0xa2>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	83 c0       	rjmp	.+262    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     f1e:	a8 e3       	ldi	r26, 0x38	; 56
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e8 e3       	ldi	r30, 0x38	; 56
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_write+0xd6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_write+0xd2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	6c c0       	rjmp	.+216    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_write+0xfe>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_write+0xfa>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	57 c0       	rjmp	.+174    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     f76:	a5 e3       	ldi	r26, 0x35	; 53
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_write+0x12e>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_write+0x12a>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	40 c0       	rjmp	.+128    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     f9e:	a5 e3       	ldi	r26, 0x35	; 53
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e3       	ldi	r30, 0x35	; 53
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_write+0x156>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_write+0x152>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	2b c0       	rjmp	.+86     	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     fce:	a2 e3       	ldi	r26, 0x32	; 50
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_write+0x186>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_write+0x182>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_write+0x1ae>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_write+0x1aa>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_u8read>:


unsigned char DIO_u8read(c8 portname,c8 pinnumber)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_u8read+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_u8read+0x8>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
    1040:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3d 83       	std	Y+5, r19	; 0x05
    104a:	2c 83       	std	Y+4, r18	; 0x04
    104c:	4c 81       	ldd	r20, Y+4	; 0x04
    104e:	5d 81       	ldd	r21, Y+5	; 0x05
    1050:	42 34       	cpi	r20, 0x42	; 66
    1052:	51 05       	cpc	r21, r1
    1054:	b1 f1       	breq	.+108    	; 0x10c2 <DIO_u8read+0x94>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 34       	cpi	r24, 0x43	; 67
    105c:	91 05       	cpc	r25, r1
    105e:	34 f4       	brge	.+12     	; 0x106c <DIO_u8read+0x3e>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	21 34       	cpi	r18, 0x41	; 65
    1066:	31 05       	cpc	r19, r1
    1068:	71 f0       	breq	.+28     	; 0x1086 <DIO_u8read+0x58>
    106a:	84 c0       	rjmp	.+264    	; 0x1174 <DIO_u8read+0x146>
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	43 34       	cpi	r20, 0x43	; 67
    1072:	51 05       	cpc	r21, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_u8read+0x4a>
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <DIO_u8read+0xd0>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	84 34       	cpi	r24, 0x44	; 68
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO_u8read+0x56>
    1082:	5b c0       	rjmp	.+182    	; 0x113a <DIO_u8read+0x10c>
    1084:	77 c0       	rjmp	.+238    	; 0x1174 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
    1086:	e9 e3       	ldi	r30, 0x39	; 57
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_u8read+0x72>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	2a 95       	dec	r18
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_u8read+0x6e>
    10a4:	9a 01       	movw	r18, r20
    10a6:	28 23       	and	r18, r24
    10a8:	39 23       	and	r19, r25
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8read+0x8a>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8read+0x86>
    10bc:	ca 01       	movw	r24, r20
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	59 c0       	rjmp	.+178    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
    10c2:	e6 e3       	ldi	r30, 0x36	; 54
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_u8read+0xae>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	2a 95       	dec	r18
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_u8read+0xaa>
    10e0:	9a 01       	movw	r18, r20
    10e2:	28 23       	and	r18, r24
    10e4:	39 23       	and	r19, r25
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8read+0xc6>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8read+0xc2>
    10f8:	ca 01       	movw	r24, r20
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	3b c0       	rjmp	.+118    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
    10fe:	e3 e3       	ldi	r30, 0x33	; 51
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8read+0xea>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	2a 95       	dec	r18
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8read+0xe6>
    111c:	9a 01       	movw	r18, r20
    111e:	28 23       	and	r18, r24
    1120:	39 23       	and	r19, r25
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8read+0x102>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8read+0xfe>
    1134:	ca 01       	movw	r24, r20
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	1d c0       	rjmp	.+58     	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
    113a:	e0 e3       	ldi	r30, 0x30	; 48
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8read+0x126>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	2a 95       	dec	r18
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8read+0x122>
    1158:	9a 01       	movw	r18, r20
    115a:	28 23       	and	r18, r24
    115c:	39 23       	and	r19, r25
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_u8read+0x13e>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_u8read+0x13a>
    1170:	ca 01       	movw	r24, r20
    1172:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <DIO_toggle>:
void DIO_toggle(c8 portname,c8 pinnumber)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_toggle+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_toggle+0x8>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	82 34       	cpi	r24, 0x42	; 66
    11a6:	91 05       	cpc	r25, r1
    11a8:	51 f1       	breq	.+84     	; 0x11fe <DIO_toggle+0x78>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	23 34       	cpi	r18, 0x43	; 67
    11b0:	31 05       	cpc	r19, r1
    11b2:	34 f4       	brge	.+12     	; 0x11c0 <DIO_toggle+0x3a>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	81 34       	cpi	r24, 0x41	; 65
    11ba:	91 05       	cpc	r25, r1
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <DIO_toggle+0x50>
    11be:	5a c0       	rjmp	.+180    	; 0x1274 <DIO_toggle+0xee>
    11c0:	2b 81       	ldd	r18, Y+3	; 0x03
    11c2:	3c 81       	ldd	r19, Y+4	; 0x04
    11c4:	23 34       	cpi	r18, 0x43	; 67
    11c6:	31 05       	cpc	r19, r1
    11c8:	71 f1       	breq	.+92     	; 0x1226 <DIO_toggle+0xa0>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	84 34       	cpi	r24, 0x44	; 68
    11d0:	91 05       	cpc	r25, r1
    11d2:	e9 f1       	breq	.+122    	; 0x124e <DIO_toggle+0xc8>
    11d4:	4f c0       	rjmp	.+158    	; 0x1274 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_toggle+0x6e>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_toggle+0x6a>
    11f8:	84 27       	eor	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	3b c0       	rjmp	.+118    	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    11fe:	a8 e3       	ldi	r26, 0x38	; 56
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e8 e3       	ldi	r30, 0x38	; 56
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_toggle+0x96>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_toggle+0x92>
    1220:	84 27       	eor	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1226:	a5 e3       	ldi	r26, 0x35	; 53
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e3       	ldi	r30, 0x35	; 53
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_toggle+0xbe>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_toggle+0xba>
    1248:	84 27       	eor	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_toggle+0xe6>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_toggle+0xe2>
    1270:	84 27       	eor	r24, r20
    1272:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <DIO_set_port_direction>:
void DIO_set_port_direction(c8 portname,c8 direction)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_set_port_direction+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_set_port_direction+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3c 83       	std	Y+4, r19	; 0x04
    129a:	2b 83       	std	Y+3, r18	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	82 34       	cpi	r24, 0x42	; 66
    12a2:	91 05       	cpc	r25, r1
    12a4:	d9 f0       	breq	.+54     	; 0x12dc <DIO_set_port_direction+0x5a>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	23 34       	cpi	r18, 0x43	; 67
    12ac:	31 05       	cpc	r19, r1
    12ae:	34 f4       	brge	.+12     	; 0x12bc <DIO_set_port_direction+0x3a>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 34       	cpi	r24, 0x41	; 65
    12b6:	91 05       	cpc	r25, r1
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_set_port_direction+0x50>
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <DIO_set_port_direction+0x76>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	23 34       	cpi	r18, 0x43	; 67
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_set_port_direction+0x64>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	84 34       	cpi	r24, 0x44	; 68
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_set_port_direction+0x6e>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    12d2:	ea e3       	ldi	r30, 0x3A	; 58
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    12dc:	e7 e3       	ldi	r30, 0x37	; 55
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    12e6:	e4 e3       	ldi	r30, 0x34	; 52
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_write_port>:
void DIO_write_port(c8 portname,c8 portvalue)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_write_port+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <DIO_write_port+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	82 34       	cpi	r24, 0x42	; 66
    1326:	91 05       	cpc	r25, r1
    1328:	d9 f0       	breq	.+54     	; 0x1360 <DIO_write_port+0x5a>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	23 34       	cpi	r18, 0x43	; 67
    1330:	31 05       	cpc	r19, r1
    1332:	34 f4       	brge	.+12     	; 0x1340 <DIO_write_port+0x3a>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	81 34       	cpi	r24, 0x41	; 65
    133a:	91 05       	cpc	r25, r1
    133c:	61 f0       	breq	.+24     	; 0x1356 <DIO_write_port+0x50>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <DIO_write_port+0x76>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	23 34       	cpi	r18, 0x43	; 67
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <DIO_write_port+0x64>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	84 34       	cpi	r24, 0x44	; 68
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <DIO_write_port+0x6e>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	0e c0       	rjmp	.+28     	; 0x137c <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	09 c0       	rjmp	.+18     	; 0x137c <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	04 c0       	rjmp	.+8      	; 0x137c <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    1374:	e2 e3       	ldi	r30, 0x32	; 50
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <DIO_read_port>:

unsigned char DIO_read_port(c8 portname)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <DIO_read_port+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_read_port+0x8>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    1398:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3c 83       	std	Y+4, r19	; 0x04
    13a2:	2b 83       	std	Y+3, r18	; 0x03
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	82 34       	cpi	r24, 0x42	; 66
    13aa:	91 05       	cpc	r25, r1
    13ac:	d9 f0       	breq	.+54     	; 0x13e4 <DIO_read_port+0x5a>
    13ae:	2b 81       	ldd	r18, Y+3	; 0x03
    13b0:	3c 81       	ldd	r19, Y+4	; 0x04
    13b2:	23 34       	cpi	r18, 0x43	; 67
    13b4:	31 05       	cpc	r19, r1
    13b6:	34 f4       	brge	.+12     	; 0x13c4 <DIO_read_port+0x3a>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	81 34       	cpi	r24, 0x41	; 65
    13be:	91 05       	cpc	r25, r1
    13c0:	61 f0       	breq	.+24     	; 0x13da <DIO_read_port+0x50>
    13c2:	1e c0       	rjmp	.+60     	; 0x1400 <DIO_read_port+0x76>
    13c4:	2b 81       	ldd	r18, Y+3	; 0x03
    13c6:	3c 81       	ldd	r19, Y+4	; 0x04
    13c8:	23 34       	cpi	r18, 0x43	; 67
    13ca:	31 05       	cpc	r19, r1
    13cc:	81 f0       	breq	.+32     	; 0x13ee <DIO_read_port+0x64>
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	84 34       	cpi	r24, 0x44	; 68
    13d4:	91 05       	cpc	r25, r1
    13d6:	81 f0       	breq	.+32     	; 0x13f8 <DIO_read_port+0x6e>
    13d8:	13 c0       	rjmp	.+38     	; 0x1400 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    13da:	e9 e3       	ldi	r30, 0x39	; 57
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    13e4:	e6 e3       	ldi	r30, 0x36	; 54
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    13ee:	e3 e3       	ldi	r30, 0x33	; 51
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    13f8:	e0 e3       	ldi	r30, 0x30	; 48
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    1400:	89 81       	ldd	r24, Y+1	; 0x01
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <DIO_vconnectpullup>:

void DIO_vconnectpullup(c8 portname ,c8 pinnumber, c8 connect_pullup)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <DIO_vconnectpullup+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <DIO_vconnectpullup+0x8>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6a 83       	std	Y+2, r22	; 0x02
    1422:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3d 83       	std	Y+5, r19	; 0x05
    142c:	2c 83       	std	Y+4, r18	; 0x04
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	82 34       	cpi	r24, 0x42	; 66
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_vconnectpullup+0x2a>
    1438:	44 c0       	rjmp	.+136    	; 0x14c2 <DIO_vconnectpullup+0xb2>
    143a:	2c 81       	ldd	r18, Y+4	; 0x04
    143c:	3d 81       	ldd	r19, Y+5	; 0x05
    143e:	23 34       	cpi	r18, 0x43	; 67
    1440:	31 05       	cpc	r19, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <DIO_vconnectpullup+0x40>
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	9d 81       	ldd	r25, Y+5	; 0x05
    1448:	81 34       	cpi	r24, 0x41	; 65
    144a:	91 05       	cpc	r25, r1
    144c:	71 f0       	breq	.+28     	; 0x146a <DIO_vconnectpullup+0x5a>
    144e:	bc c0       	rjmp	.+376    	; 0x15c8 <DIO_vconnectpullup+0x1b8>
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	23 34       	cpi	r18, 0x43	; 67
    1456:	31 05       	cpc	r19, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <DIO_vconnectpullup+0x4c>
    145a:	5f c0       	rjmp	.+190    	; 0x151a <DIO_vconnectpullup+0x10a>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	84 34       	cpi	r24, 0x44	; 68
    1462:	91 05       	cpc	r25, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <DIO_vconnectpullup+0x58>
    1466:	85 c0       	rjmp	.+266    	; 0x1572 <DIO_vconnectpullup+0x162>
    1468:	af c0       	rjmp	.+350    	; 0x15c8 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	a1 f4       	brne	.+40     	; 0x1498 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    1470:	ab e3       	ldi	r26, 0x3B	; 59
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e3       	ldi	r30, 0x3B	; 59
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_vconnectpullup+0x7e>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_vconnectpullup+0x7a>
    1492:	84 2b       	or	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	98 c0       	rjmp	.+304    	; 0x15c8 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    1498:	ab e3       	ldi	r26, 0x3B	; 59
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_vconnectpullup+0xa6>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_vconnectpullup+0xa2>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	83 c0       	rjmp	.+262    	; 0x15c8 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	a1 f4       	brne	.+40     	; 0x14f0 <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    14c8:	a8 e3       	ldi	r26, 0x38	; 56
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_vconnectpullup+0xd6>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_vconnectpullup+0xd2>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	6c c0       	rjmp	.+216    	; 0x15c8 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    14f0:	a8 e3       	ldi	r26, 0x38	; 56
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e8 e3       	ldi	r30, 0x38	; 56
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_vconnectpullup+0xfe>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_vconnectpullup+0xfa>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	57 c0       	rjmp	.+174    	; 0x15c8 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	a1 f4       	brne	.+40     	; 0x1548 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    1520:	a5 e3       	ldi	r26, 0x35	; 53
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e3       	ldi	r30, 0x35	; 53
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_vconnectpullup+0x12e>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_vconnectpullup+0x12a>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	40 c0       	rjmp	.+128    	; 0x15c8 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    1548:	a5 e3       	ldi	r26, 0x35	; 53
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e3       	ldi	r30, 0x35	; 53
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_vconnectpullup+0x156>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_vconnectpullup+0x152>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	2b c0       	rjmp	.+86     	; 0x15c8 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_vconnectpullup+0x186>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_vconnectpullup+0x182>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    15a0:	a2 e3       	ldi	r26, 0x32	; 50
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e2 e3       	ldi	r30, 0x32	; 50
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_vconnectpullup+0x1ae>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_vconnectpullup+0x1aa>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <write_low_nibble>:

void write_low_nibble(c8 portname,c8 value)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <write_low_nibble+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <write_low_nibble+0x8>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	8f 70       	andi	r24, 0x0F	; 15
    15ec:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3c 83       	std	Y+4, r19	; 0x04
    15f6:	2b 83       	std	Y+3, r18	; 0x03
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	82 34       	cpi	r24, 0x42	; 66
    15fe:	91 05       	cpc	r25, r1
    1600:	31 f1       	breq	.+76     	; 0x164e <write_low_nibble+0x76>
    1602:	2b 81       	ldd	r18, Y+3	; 0x03
    1604:	3c 81       	ldd	r19, Y+4	; 0x04
    1606:	23 34       	cpi	r18, 0x43	; 67
    1608:	31 05       	cpc	r19, r1
    160a:	34 f4       	brge	.+12     	; 0x1618 <write_low_nibble+0x40>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	81 34       	cpi	r24, 0x41	; 65
    1612:	91 05       	cpc	r25, r1
    1614:	61 f0       	breq	.+24     	; 0x162e <write_low_nibble+0x56>
    1616:	4a c0       	rjmp	.+148    	; 0x16ac <write_low_nibble+0xd4>
    1618:	2b 81       	ldd	r18, Y+3	; 0x03
    161a:	3c 81       	ldd	r19, Y+4	; 0x04
    161c:	23 34       	cpi	r18, 0x43	; 67
    161e:	31 05       	cpc	r19, r1
    1620:	31 f1       	breq	.+76     	; 0x166e <write_low_nibble+0x96>
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	84 34       	cpi	r24, 0x44	; 68
    1628:	91 05       	cpc	r25, r1
    162a:	89 f1       	breq	.+98     	; 0x168e <write_low_nibble+0xb6>
    162c:	3f c0       	rjmp	.+126    	; 0x16ac <write_low_nibble+0xd4>
	{
		case 'A':
		PORTA&=0xf0;
    162e:	ab e3       	ldi	r26, 0x3B	; 59
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 7f       	andi	r24, 0xF0	; 240
    163a:	8c 93       	st	X, r24
		PORTA|=value;
    163c:	ab e3       	ldi	r26, 0x3B	; 59
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	eb e3       	ldi	r30, 0x3B	; 59
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	90 81       	ld	r25, Z
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	89 2b       	or	r24, r25
    164a:	8c 93       	st	X, r24
    164c:	2f c0       	rjmp	.+94     	; 0x16ac <write_low_nibble+0xd4>
		break;
		case 'B':
		PORTB&=0xf0;
    164e:	a8 e3       	ldi	r26, 0x38	; 56
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e8 e3       	ldi	r30, 0x38	; 56
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 7f       	andi	r24, 0xF0	; 240
    165a:	8c 93       	st	X, r24
		PORTB|=value;
    165c:	a8 e3       	ldi	r26, 0x38	; 56
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	90 81       	ld	r25, Z
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	89 2b       	or	r24, r25
    166a:	8c 93       	st	X, r24
    166c:	1f c0       	rjmp	.+62     	; 0x16ac <write_low_nibble+0xd4>
		break;
		case 'C':
		PORTC&=0xf0;
    166e:	a5 e3       	ldi	r26, 0x35	; 53
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e5 e3       	ldi	r30, 0x35	; 53
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 7f       	andi	r24, 0xF0	; 240
    167a:	8c 93       	st	X, r24
		PORTC|=value;
    167c:	a5 e3       	ldi	r26, 0x35	; 53
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e3       	ldi	r30, 0x35	; 53
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	90 81       	ld	r25, Z
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	89 2b       	or	r24, r25
    168a:	8c 93       	st	X, r24
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <write_low_nibble+0xd4>
		break;
		case 'D':
		PORTD&=0xf0;
    168e:	a2 e3       	ldi	r26, 0x32	; 50
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e2 e3       	ldi	r30, 0x32	; 50
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 7f       	andi	r24, 0xF0	; 240
    169a:	8c 93       	st	X, r24
		PORTD|=value;
    169c:	a2 e3       	ldi	r26, 0x32	; 50
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e2 e3       	ldi	r30, 0x32	; 50
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	90 81       	ld	r25, Z
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	89 2b       	or	r24, r25
    16aa:	8c 93       	st	X, r24
		break;
	}
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <write_high_nibble>:

void write_high_nibble(c8 portname,c8 value)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <write_high_nibble+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <write_high_nibble+0x8>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	82 95       	swap	r24
    16ce:	80 7f       	andi	r24, 0xF0	; 240
    16d0:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3c 83       	std	Y+4, r19	; 0x04
    16da:	2b 83       	std	Y+3, r18	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	82 34       	cpi	r24, 0x42	; 66
    16e2:	91 05       	cpc	r25, r1
    16e4:	31 f1       	breq	.+76     	; 0x1732 <write_high_nibble+0x78>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	23 34       	cpi	r18, 0x43	; 67
    16ec:	31 05       	cpc	r19, r1
    16ee:	34 f4       	brge	.+12     	; 0x16fc <write_high_nibble+0x42>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	81 34       	cpi	r24, 0x41	; 65
    16f6:	91 05       	cpc	r25, r1
    16f8:	61 f0       	breq	.+24     	; 0x1712 <write_high_nibble+0x58>
    16fa:	4a c0       	rjmp	.+148    	; 0x1790 <write_high_nibble+0xd6>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	23 34       	cpi	r18, 0x43	; 67
    1702:	31 05       	cpc	r19, r1
    1704:	31 f1       	breq	.+76     	; 0x1752 <write_high_nibble+0x98>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	84 34       	cpi	r24, 0x44	; 68
    170c:	91 05       	cpc	r25, r1
    170e:	89 f1       	breq	.+98     	; 0x1772 <write_high_nibble+0xb8>
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <write_high_nibble+0xd6>
	{
		case 'A':
		PORTA&=0x0f;
    1712:	ab e3       	ldi	r26, 0x3B	; 59
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	eb e3       	ldi	r30, 0x3B	; 59
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 70       	andi	r24, 0x0F	; 15
    171e:	8c 93       	st	X, r24
		PORTA|=value;
    1720:	ab e3       	ldi	r26, 0x3B	; 59
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	eb e3       	ldi	r30, 0x3B	; 59
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	90 81       	ld	r25, Z
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	89 2b       	or	r24, r25
    172e:	8c 93       	st	X, r24
    1730:	2f c0       	rjmp	.+94     	; 0x1790 <write_high_nibble+0xd6>
		break;
		case 'B':
		PORTB&=0x0f;
    1732:	a8 e3       	ldi	r26, 0x38	; 56
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e8 e3       	ldi	r30, 0x38	; 56
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8f 70       	andi	r24, 0x0F	; 15
    173e:	8c 93       	st	X, r24
		PORTB|=value;
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	90 81       	ld	r25, Z
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	89 2b       	or	r24, r25
    174e:	8c 93       	st	X, r24
    1750:	1f c0       	rjmp	.+62     	; 0x1790 <write_high_nibble+0xd6>
		break;
		case 'C':
		PORTC&=0x0f;
    1752:	a5 e3       	ldi	r26, 0x35	; 53
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e3       	ldi	r30, 0x35	; 53
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8f 70       	andi	r24, 0x0F	; 15
    175e:	8c 93       	st	X, r24
		PORTC|=value;
    1760:	a5 e3       	ldi	r26, 0x35	; 53
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	90 81       	ld	r25, Z
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	89 2b       	or	r24, r25
    176e:	8c 93       	st	X, r24
    1770:	0f c0       	rjmp	.+30     	; 0x1790 <write_high_nibble+0xd6>
		break;
		case 'D':
		PORTD&=0x0f;
    1772:	a2 e3       	ldi	r26, 0x32	; 50
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e2 e3       	ldi	r30, 0x32	; 50
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	8c 93       	st	X, r24
		PORTD|=value;
    1780:	a2 e3       	ldi	r26, 0x32	; 50
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e2 e3       	ldi	r30, 0x32	; 50
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	90 81       	ld	r25, Z
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	89 2b       	or	r24, r25
    178e:	8c 93       	st	X, r24
		break;
	}
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <ULTRA_IN>:
#include "std.h"
#define  F_CPU 1000000UL

u8 a,b,high,distance;

void ULTRA_IN(){
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	68 97       	sbiw	r28, 0x18	; 24
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
	TCCR1A = 0;
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	10 82       	st	Z, r1
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
    17b8:	e8 e5       	ldi	r30, 0x58	; 88
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 e2       	ldi	r24, 0x20	; 32
    17be:	80 83       	st	Z, r24
		DIO_write('D',7,1);
    17c0:	84 e4       	ldi	r24, 0x44	; 68
    17c2:	67 e0       	ldi	r22, 0x07	; 7
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a8 e4       	ldi	r26, 0x48	; 72
    17d0:	b2 e4       	ldi	r27, 0x42	; 66
    17d2:	8d 8b       	std	Y+21, r24	; 0x15
    17d4:	9e 8b       	std	Y+22, r25	; 0x16
    17d6:	af 8b       	std	Y+23, r26	; 0x17
    17d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17da:	6d 89       	ldd	r22, Y+21	; 0x15
    17dc:	7e 89       	ldd	r23, Y+22	; 0x16
    17de:	8f 89       	ldd	r24, Y+23	; 0x17
    17e0:	98 8d       	ldd	r25, Y+24	; 0x18
    17e2:	2b ea       	ldi	r18, 0xAB	; 171
    17e4:	3a ea       	ldi	r19, 0xAA	; 170
    17e6:	4a e2       	ldi	r20, 0x2A	; 42
    17e8:	50 e4       	ldi	r21, 0x40	; 64
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	89 8b       	std	Y+17, r24	; 0x11
    17f4:	9a 8b       	std	Y+18, r25	; 0x12
    17f6:	ab 8b       	std	Y+19, r26	; 0x13
    17f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    17fa:	69 89       	ldd	r22, Y+17	; 0x11
    17fc:	7a 89       	ldd	r23, Y+18	; 0x12
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	9c 89       	ldd	r25, Y+20	; 0x14
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	1c f4       	brge	.+6      	; 0x1818 <ULTRA_IN+0x7a>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	88 8b       	std	Y+16, r24	; 0x10
    1816:	91 c0       	rjmp	.+290    	; 0x193a <ULTRA_IN+0x19c>
	else if (__tmp > 255)
    1818:	69 89       	ldd	r22, Y+17	; 0x11
    181a:	7a 89       	ldd	r23, Y+18	; 0x12
    181c:	8b 89       	ldd	r24, Y+19	; 0x13
    181e:	9c 89       	ldd	r25, Y+20	; 0x14
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	53 e4       	ldi	r21, 0x43	; 67
    1828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182c:	18 16       	cp	r1, r24
    182e:	0c f0       	brlt	.+2      	; 0x1832 <ULTRA_IN+0x94>
    1830:	7b c0       	rjmp	.+246    	; 0x1928 <ULTRA_IN+0x18a>
	{
		_delay_ms(__us / 1000.0);
    1832:	6d 89       	ldd	r22, Y+21	; 0x15
    1834:	7e 89       	ldd	r23, Y+22	; 0x16
    1836:	8f 89       	ldd	r24, Y+23	; 0x17
    1838:	98 8d       	ldd	r25, Y+24	; 0x18
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a e7       	ldi	r20, 0x7A	; 122
    1840:	54 e4       	ldi	r21, 0x44	; 68
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	8c 87       	std	Y+12, r24	; 0x0c
    184c:	9d 87       	std	Y+13, r25	; 0x0d
    184e:	ae 87       	std	Y+14, r26	; 0x0e
    1850:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1852:	6c 85       	ldd	r22, Y+12	; 0x0c
    1854:	7d 85       	ldd	r23, Y+13	; 0x0d
    1856:	8e 85       	ldd	r24, Y+14	; 0x0e
    1858:	9f 85       	ldd	r25, Y+15	; 0x0f
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a ef       	ldi	r20, 0xFA	; 250
    1860:	54 e4       	ldi	r21, 0x44	; 68
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	88 87       	std	Y+8, r24	; 0x08
    186c:	99 87       	std	Y+9, r25	; 0x09
    186e:	aa 87       	std	Y+10, r26	; 0x0a
    1870:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1872:	68 85       	ldd	r22, Y+8	; 0x08
    1874:	79 85       	ldd	r23, Y+9	; 0x09
    1876:	8a 85       	ldd	r24, Y+10	; 0x0a
    1878:	9b 85       	ldd	r25, Y+11	; 0x0b
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1886:	88 23       	and	r24, r24
    1888:	2c f4       	brge	.+10     	; 0x1894 <ULTRA_IN+0xf6>
		__ticks = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9f 83       	std	Y+7, r25	; 0x07
    1890:	8e 83       	std	Y+6, r24	; 0x06
    1892:	3f c0       	rjmp	.+126    	; 0x1912 <ULTRA_IN+0x174>
	else if (__tmp > 65535)
    1894:	68 85       	ldd	r22, Y+8	; 0x08
    1896:	79 85       	ldd	r23, Y+9	; 0x09
    1898:	8a 85       	ldd	r24, Y+10	; 0x0a
    189a:	9b 85       	ldd	r25, Y+11	; 0x0b
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	4c f5       	brge	.+82     	; 0x18fe <ULTRA_IN+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    18b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    18b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	51 e4       	ldi	r21, 0x41	; 65
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9f 83       	std	Y+7, r25	; 0x07
    18d2:	8e 83       	std	Y+6, r24	; 0x06
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <ULTRA_IN+0x156>
    18d6:	88 ec       	ldi	r24, 0xC8	; 200
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9d 83       	std	Y+5, r25	; 0x05
    18dc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <ULTRA_IN+0x144>
    18e6:	9d 83       	std	Y+5, r25	; 0x05
    18e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ea:	8e 81       	ldd	r24, Y+6	; 0x06
    18ec:	9f 81       	ldd	r25, Y+7	; 0x07
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	9f 83       	std	Y+7, r25	; 0x07
    18f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f4:	8e 81       	ldd	r24, Y+6	; 0x06
    18f6:	9f 81       	ldd	r25, Y+7	; 0x07
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	69 f7       	brne	.-38     	; 0x18d6 <ULTRA_IN+0x138>
    18fc:	24 c0       	rjmp	.+72     	; 0x1946 <ULTRA_IN+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fe:	68 85       	ldd	r22, Y+8	; 0x08
    1900:	79 85       	ldd	r23, Y+9	; 0x09
    1902:	8a 85       	ldd	r24, Y+10	; 0x0a
    1904:	9b 85       	ldd	r25, Y+11	; 0x0b
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9f 83       	std	Y+7, r25	; 0x07
    1910:	8e 83       	std	Y+6, r24	; 0x06
    1912:	8e 81       	ldd	r24, Y+6	; 0x06
    1914:	9f 81       	ldd	r25, Y+7	; 0x07
    1916:	9b 83       	std	Y+3, r25	; 0x03
    1918:	8a 83       	std	Y+2, r24	; 0x02
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <ULTRA_IN+0x180>
    1922:	9b 83       	std	Y+3, r25	; 0x03
    1924:	8a 83       	std	Y+2, r24	; 0x02
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <ULTRA_IN+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1928:	69 89       	ldd	r22, Y+17	; 0x11
    192a:	7a 89       	ldd	r23, Y+18	; 0x12
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	88 8b       	std	Y+16, r24	; 0x10
    193a:	88 89       	ldd	r24, Y+16	; 0x10
    193c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	8a 95       	dec	r24
    1942:	f1 f7       	brne	.-4      	; 0x1940 <ULTRA_IN+0x1a2>
    1944:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);
		DIO_write('D',7,0);
    1946:	84 e4       	ldi	r24, 0x44	; 68
    1948:	67 e0       	ldi	r22, 0x07	; 7
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>

	    TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
    1950:	ee e4       	ldi	r30, 0x4E	; 78
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	81 ec       	ldi	r24, 0xC1	; 193
    1956:	80 83       	st	Z, r24
	    while ((TIFR&(1<<ICF1)) == 0);
    1958:	e8 e5       	ldi	r30, 0x58	; 88
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	80 72       	andi	r24, 0x20	; 32
    1964:	90 70       	andi	r25, 0x00	; 0
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	b9 f3       	breq	.-18     	; 0x1958 <ULTRA_IN+0x1ba>
	    a = ICR1;  		/* Take value of capture register */
    196a:	e6 e4       	ldi	r30, 0x46	; 70
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	90 93 83 00 	sts	0x0083, r25
    1976:	80 93 82 00 	sts	0x0082, r24
	    TIFR = (1<<ICF1);  	/* Clear ICF flag */
    197a:	e8 e5       	ldi	r30, 0x58	; 88
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	80 83       	st	Z, r24
	    TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
    1982:	ee e4       	ldi	r30, 0x4E	; 78
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	81 e8       	ldi	r24, 0x81	; 129
    1988:	80 83       	st	Z, r24
	    while ((TIFR&(1<<ICF1)) == 0);
    198a:	e8 e5       	ldi	r30, 0x58	; 88
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	80 72       	andi	r24, 0x20	; 32
    1996:	90 70       	andi	r25, 0x00	; 0
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	b9 f3       	breq	.-18     	; 0x198a <ULTRA_IN+0x1ec>
	    b = ICR1;  		/* Take value of capture register */
    199c:	e6 e4       	ldi	r30, 0x46	; 70
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	90 93 7d 00 	sts	0x007D, r25
    19a8:	80 93 7c 00 	sts	0x007C, r24
	    TIFR = (1<<ICF1);  	/* Clear ICF flag */
    19ac:	e8 e5       	ldi	r30, 0x58	; 88
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 e2       	ldi	r24, 0x20	; 32
    19b2:	80 83       	st	Z, r24
		TCNT1=0;
    19b4:	ec e4       	ldi	r30, 0x4C	; 76
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	11 82       	std	Z+1, r1	; 0x01
    19ba:	10 82       	st	Z, r1
	    TCCR1B = 0;  		/* Stop the timer */
    19bc:	ee e4       	ldi	r30, 0x4E	; 78
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	10 82       	st	Z, r1
		high=b-a;
    19c2:	20 91 7c 00 	lds	r18, 0x007C
    19c6:	30 91 7d 00 	lds	r19, 0x007D
    19ca:	80 91 82 00 	lds	r24, 0x0082
    19ce:	90 91 83 00 	lds	r25, 0x0083
    19d2:	a9 01       	movw	r20, r18
    19d4:	48 1b       	sub	r20, r24
    19d6:	59 0b       	sbc	r21, r25
    19d8:	ca 01       	movw	r24, r20
    19da:	90 93 81 00 	sts	0x0081, r25
    19de:	80 93 80 00 	sts	0x0080, r24
		distance = ((high*34600)/(F_CPU*2)) ;
    19e2:	80 91 80 00 	lds	r24, 0x0080
    19e6:	90 91 81 00 	lds	r25, 0x0081
    19ea:	cc 01       	movw	r24, r24
    19ec:	a0 e0       	ldi	r26, 0x00	; 0
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	28 e2       	ldi	r18, 0x28	; 40
    19f2:	37 e8       	ldi	r19, 0x87	; 135
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__mulsi3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	20 e8       	ldi	r18, 0x80	; 128
    1a06:	34 e8       	ldi	r19, 0x84	; 132
    1a08:	4e e1       	ldi	r20, 0x1E	; 30
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__udivmodsi4>
    1a14:	da 01       	movw	r26, r20
    1a16:	c9 01       	movw	r24, r18
    1a18:	90 93 7f 00 	sts	0x007F, r25
    1a1c:	80 93 7e 00 	sts	0x007E, r24


}
    1a20:	68 96       	adiw	r28, 0x18	; 24
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <ULTEA_CON>:
void ULTEA_CON(){
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	6c 97       	sbiw	r28, 0x1c	; 28
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
	   ULTRA_IN();
    1a46:	0e 94 cf 0b 	call	0x179e	; 0x179e <ULTRA_IN>
       if (distance<=50)
    1a4a:	80 91 7e 00 	lds	r24, 0x007E
    1a4e:	90 91 7f 00 	lds	r25, 0x007F
    1a52:	83 33       	cpi	r24, 0x33	; 51
    1a54:	91 05       	cpc	r25, r1
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <ULTEA_CON+0x28>
    1a58:	7f c0       	rjmp	.+254    	; 0x1b58 <ULTEA_CON+0x126>
	  		{
				LCD_clearscreen();
    1a5a:	0e 94 1f 14 	call	0x283e	; 0x283e <LCD_clearscreen>
				LCD_vSend_string("DANGER");
    1a5e:	80 e6       	ldi	r24, 0x60	; 96
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 03 14 	call	0x2806	; 0x2806 <LCD_vSend_string>
				LED_Init();
    1a66:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <LED_Init>
				LED_On();
    1a6a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <LED_On>
				BUZZ_On();
    1a6e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <BUZZ_On>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	aa ef       	ldi	r26, 0xFA	; 250
    1a78:	b3 e4       	ldi	r27, 0x43	; 67
    1a7a:	89 8f       	std	Y+25, r24	; 0x19
    1a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	69 8d       	ldd	r22, Y+25	; 0x19
    1a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a ef       	ldi	r20, 0xFA	; 250
    1a90:	54 e4       	ldi	r21, 0x44	; 68
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8d 8b       	std	Y+21, r24	; 0x15
    1a9c:	9e 8b       	std	Y+22, r25	; 0x16
    1a9e:	af 8b       	std	Y+23, r26	; 0x17
    1aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <ULTEA_CON+0x92>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <ULTEA_CON+0x110>
	else if (__tmp > 65535)
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <ULTEA_CON+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9c 8b       	std	Y+20, r25	; 0x14
    1b02:	8b 8b       	std	Y+19, r24	; 0x13
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <ULTEA_CON+0xf2>
    1b06:	88 ec       	ldi	r24, 0xC8	; 200
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9a 8b       	std	Y+18, r25	; 0x12
    1b0c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b0e:	89 89       	ldd	r24, Y+17	; 0x11
    1b10:	9a 89       	ldd	r25, Y+18	; 0x12
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <ULTEA_CON+0xe0>
    1b16:	9a 8b       	std	Y+18, r25	; 0x12
    1b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8b 89       	ldd	r24, Y+19	; 0x13
    1b26:	9c 89       	ldd	r25, Y+20	; 0x14
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <ULTEA_CON+0xd4>
    1b2c:	ae c0       	rjmp	.+348    	; 0x1c8a <ULTEA_CON+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b30:	7e 89       	ldd	r23, Y+22	; 0x16
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9c 8b       	std	Y+20, r25	; 0x14
    1b40:	8b 8b       	std	Y+19, r24	; 0x13
    1b42:	8b 89       	ldd	r24, Y+19	; 0x13
    1b44:	9c 89       	ldd	r25, Y+20	; 0x14
    1b46:	98 8b       	std	Y+16, r25	; 0x10
    1b48:	8f 87       	std	Y+15, r24	; 0x0f
    1b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4c:	98 89       	ldd	r25, Y+16	; 0x10
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <ULTEA_CON+0x11c>
    1b52:	98 8b       	std	Y+16, r25	; 0x10
    1b54:	8f 87       	std	Y+15, r24	; 0x0f
    1b56:	99 c0       	rjmp	.+306    	; 0x1c8a <ULTEA_CON+0x258>
				_delay_ms(500);
			}
	  else
			{
		    LCD_clearscreen();
    1b58:	0e 94 1f 14 	call	0x283e	; 0x283e <LCD_clearscreen>
			LED_Off();
    1b5c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <LED_Off>
			BUZZ_Off();
    1b60:	0e 94 65 15 	call	0x2aca	; 0x2aca <BUZZ_Off>
			LCD_vSend_string("distance=");
    1b64:	87 e6       	ldi	r24, 0x67	; 103
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 03 14 	call	0x2806	; 0x2806 <LCD_vSend_string>
			LCD_vSend_char((distance/10)+48);
    1b6c:	80 91 7e 00 	lds	r24, 0x007E
    1b70:	90 91 7f 00 	lds	r25, 0x007F
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	b9 01       	movw	r22, r18
    1b7a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__udivmodhi4>
    1b7e:	cb 01       	movw	r24, r22
    1b80:	80 5d       	subi	r24, 0xD0	; 208
    1b82:	0e 94 63 13 	call	0x26c6	; 0x26c6 <LCD_vSend_char>
			LCD_vSend_char((distance%10)+48);
    1b86:	80 91 7e 00 	lds	r24, 0x007E
    1b8a:	90 91 7f 00 	lds	r25, 0x007F
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	b9 01       	movw	r22, r18
    1b94:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__udivmodhi4>
    1b98:	80 5d       	subi	r24, 0xD0	; 208
    1b9a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <LCD_vSend_char>
		    LCD_vSend_string("cm");
    1b9e:	81 e7       	ldi	r24, 0x71	; 113
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 03 14 	call	0x2806	; 0x2806 <LCD_vSend_string>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	aa ef       	ldi	r26, 0xFA	; 250
    1bac:	b3 e4       	ldi	r27, 0x43	; 67
    1bae:	8b 87       	std	Y+11, r24	; 0x0b
    1bb0:	9c 87       	std	Y+12, r25	; 0x0c
    1bb2:	ad 87       	std	Y+13, r26	; 0x0d
    1bb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a ef       	ldi	r20, 0xFA	; 250
    1bc4:	54 e4       	ldi	r21, 0x44	; 68
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	8f 83       	std	Y+7, r24	; 0x07
    1bd0:	98 87       	std	Y+8, r25	; 0x08
    1bd2:	a9 87       	std	Y+9, r26	; 0x09
    1bd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <ULTEA_CON+0x1c6>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <ULTEA_CON+0x244>
	else if (__tmp > 65535)
    1bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfa:	78 85       	ldd	r23, Y+8	; 0x08
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	4c f5       	brge	.+82     	; 0x1c62 <ULTEA_CON+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <ULTEA_CON+0x226>
    1c3a:	88 ec       	ldi	r24, 0xC8	; 200
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <ULTEA_CON+0x214>
    1c4a:	9c 83       	std	Y+4, r25	; 0x04
    1c4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	69 f7       	brne	.-38     	; 0x1c3a <ULTEA_CON+0x208>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <ULTEA_CON+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <ULTEA_CON+0x250>
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			}
}
    1c8a:	6c 96       	adiw	r28, 0x1c	; 28
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <LED_Init>:
 *      Author: iamasd
 */
#include "DIO.h"
#include "LED.h"

void LED_Init() {
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	DIO_vsetPINDir('D',LED_PIN_ID,LED_DIR);
    1ca4:	84 e4       	ldi	r24, 0x44	; 68
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>

}
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <LED_On>:

void LED_On() {
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
	DIO_write('D',LED_PIN_ID,LED_HIGH);
    1cbc:	84 e4       	ldi	r24, 0x44	; 68
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>

}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <LED_Off>:

void LED_Off() {
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	DIO_write('D',LED_PIN_ID,LED_LOW);
    1cd4:	84 e4       	ldi	r24, 0x44	; 68
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	c4 55       	subi	r28, 0x54	; 84
    1cf2:	d0 40       	sbci	r29, 0x00	; 0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ef 5a       	subi	r30, 0xAF	; 175
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a8 e4       	ldi	r26, 0x48	; 72
    1d0a:	b3 e4       	ldi	r27, 0x43	; 67
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	a2 83       	std	Z+2, r26	; 0x02
    1d12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	8e 01       	movw	r16, r28
    1d16:	03 5b       	subi	r16, 0xB3	; 179
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ef 5a       	subi	r30, 0xAF	; 175
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a ef       	ldi	r20, 0xFA	; 250
    1d2e:	54 e4       	ldi	r21, 0x44	; 68
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	f8 01       	movw	r30, r16
    1d3a:	80 83       	st	Z, r24
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	a2 83       	std	Z+2, r26	; 0x02
    1d40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d42:	fe 01       	movw	r30, r28
    1d44:	e3 5b       	subi	r30, 0xB3	; 179
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	44 f4       	brge	.+16     	; 0x1d70 <LCD_vInit+0x8c>
		__ticks = 1;
    1d60:	fe 01       	movw	r30, r28
    1d62:	e5 5b       	subi	r30, 0xB5	; 181
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
    1d6e:	64 c0       	rjmp	.+200    	; 0x1e38 <LCD_vInit+0x154>
	else if (__tmp > 65535)
    1d70:	fe 01       	movw	r30, r28
    1d72:	e3 5b       	subi	r30, 0xB3	; 179
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	0c f0       	brlt	.+2      	; 0x1d90 <LCD_vInit+0xac>
    1d8e:	43 c0       	rjmp	.+134    	; 0x1e16 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	fe 01       	movw	r30, r28
    1d92:	ef 5a       	subi	r30, 0xAF	; 175
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8e 01       	movw	r16, r28
    1db0:	05 5b       	subi	r16, 0xB5	; 181
    1db2:	1f 4f       	sbci	r17, 0xFF	; 255
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	80 83       	st	Z, r24
    1dc6:	1f c0       	rjmp	.+62     	; 0x1e06 <LCD_vInit+0x122>
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e7 5b       	subi	r30, 0xB7	; 183
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	80 83       	st	Z, r24
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e7 5b       	subi	r30, 0xB7	; 183
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_vInit+0xfc>
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 5b       	subi	r30, 0xB7	; 183
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	de 01       	movw	r26, r28
    1df0:	a5 5b       	subi	r26, 0xB5	; 181
    1df2:	bf 4f       	sbci	r27, 0xFF	; 255
    1df4:	fe 01       	movw	r30, r28
    1df6:	e5 5b       	subi	r30, 0xB5	; 181
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	9c 93       	st	X, r25
    1e04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	fe 01       	movw	r30, r28
    1e08:	e5 5b       	subi	r30, 0xB5	; 181
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	d1 f6       	brne	.-76     	; 0x1dc8 <LCD_vInit+0xe4>
    1e14:	27 c0       	rjmp	.+78     	; 0x1e64 <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	8e 01       	movw	r16, r28
    1e18:	05 5b       	subi	r16, 0xB5	; 181
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e3 5b       	subi	r30, 0xB3	; 179
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	f8 01       	movw	r30, r16
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	de 01       	movw	r26, r28
    1e3a:	a9 5b       	subi	r26, 0xB9	; 185
    1e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e5 5b       	subi	r30, 0xB5	; 181
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	8d 93       	st	X+, r24
    1e4a:	9c 93       	st	X, r25
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e9 5b       	subi	r30, 0xB9	; 185
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_vInit+0x172>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e9 5b       	subi	r30, 0xB9	; 185
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	91 83       	std	Z+1, r25	; 0x01
    1e62:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
    1e64:	81 e4       	ldi	r24, 0x41	; 65
    1e66:	64 e0       	ldi	r22, 0x04	; 4
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    1e6e:	81 e4       	ldi	r24, 0x41	; 65
    1e70:	65 e0       	ldi	r22, 0x05	; 5
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    1e78:	81 e4       	ldi	r24, 0x41	; 65
    1e7a:	66 e0       	ldi	r22, 0x06	; 6
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    1e82:	81 e4       	ldi	r24, 0x41	; 65
    1e84:	67 e0       	ldi	r22, 0x07	; 7
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
    1e8c:	82 e4       	ldi	r24, 0x42	; 66
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
    1e96:	82 e4       	ldi	r24, 0x42	; 66
    1e98:	62 e0       	ldi	r22, 0x02	; 2
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
    1ea0:	82 e4       	ldi	r24, 0x42	; 66
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
    1eaa:	82 e4       	ldi	r24, 0x42	; 66
    1eac:	62 e0       	ldi	r22, 0x02	; 2
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_vSend_cmd>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ed 5b       	subi	r30, 0xBD	; 189
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e2       	ldi	r26, 0x20	; 32
    1ec6:	b1 e4       	ldi	r27, 0x41	; 65
    1ec8:	80 83       	st	Z, r24
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	a2 83       	std	Z+2, r26	; 0x02
    1ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	01 5c       	subi	r16, 0xC1	; 193
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ed 5b       	subi	r30, 0xBD	; 189
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	80 83       	st	Z, r24
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	a2 83       	std	Z+2, r26	; 0x02
    1efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efe:	fe 01       	movw	r30, r28
    1f00:	ff 96       	adiw	r30, 0x3f	; 63
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_vInit+0x240>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9e af       	std	Y+62, r25	; 0x3e
    1f20:	8d af       	std	Y+61, r24	; 0x3d
    1f22:	46 c0       	rjmp	.+140    	; 0x1fb0 <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
    1f24:	fe 01       	movw	r30, r28
    1f26:	ff 96       	adiw	r30, 0x3f	; 63
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	57 e4       	ldi	r21, 0x47	; 71
    1f38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3c:	18 16       	cp	r1, r24
    1f3e:	64 f5       	brge	.+88     	; 0x1f98 <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	fe 01       	movw	r30, r28
    1f42:	ed 5b       	subi	r30, 0xBD	; 189
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9e af       	std	Y+62, r25	; 0x3e
    1f6c:	8d af       	std	Y+61, r24	; 0x3d
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <LCD_vInit+0x2aa>
    1f70:	88 ec       	ldi	r24, 0xC8	; 200
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9c af       	std	Y+60, r25	; 0x3c
    1f76:	8b af       	std	Y+59, r24	; 0x3b
    1f78:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_vInit+0x298>
    1f80:	9c af       	std	Y+60, r25	; 0x3c
    1f82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f84:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f86:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	9e af       	std	Y+62, r25	; 0x3e
    1f8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f90:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	69 f7       	brne	.-38     	; 0x1f70 <LCD_vInit+0x28c>
    1f96:	16 c0       	rjmp	.+44     	; 0x1fc4 <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ff 96       	adiw	r30, 0x3f	; 63
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e af       	std	Y+62, r25	; 0x3e
    1fae:	8d af       	std	Y+61, r24	; 0x3d
    1fb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb4:	9a af       	std	Y+58, r25	; 0x3a
    1fb6:	89 af       	std	Y+57, r24	; 0x39
    1fb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1fba:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_vInit+0x2d8>
    1fc0:	9a af       	std	Y+58, r25	; 0x3a
    1fc2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    1fc4:	88 e2       	ldi	r24, 0x28	; 40
    1fc6:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_vSend_cmd>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e8       	ldi	r26, 0x80	; 128
    1fd0:	bf e3       	ldi	r27, 0x3F	; 63
    1fd2:	8d ab       	std	Y+53, r24	; 0x35
    1fd4:	9e ab       	std	Y+54, r25	; 0x36
    1fd6:	af ab       	std	Y+55, r26	; 0x37
    1fd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	6d a9       	ldd	r22, Y+53	; 0x35
    1fdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1fde:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a ef       	ldi	r20, 0xFA	; 250
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	89 ab       	std	Y+49, r24	; 0x31
    1ff4:	9a ab       	std	Y+50, r25	; 0x32
    1ff6:	ab ab       	std	Y+51, r26	; 0x33
    1ff8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffa:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    2000:	9c a9       	ldd	r25, Y+52	; 0x34
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <LCD_vInit+0x338>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
    201a:	3f c0       	rjmp	.+126    	; 0x209a <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    201c:	69 a9       	ldd	r22, Y+49	; 0x31
    201e:	7a a9       	ldd	r23, Y+50	; 0x32
    2020:	8b a9       	ldd	r24, Y+51	; 0x33
    2022:	9c a9       	ldd	r25, Y+52	; 0x34
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	6d a9       	ldd	r22, Y+53	; 0x35
    2036:	7e a9       	ldd	r23, Y+54	; 0x36
    2038:	8f a9       	ldd	r24, Y+55	; 0x37
    203a:	98 ad       	ldd	r25, Y+56	; 0x38
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	98 ab       	std	Y+48, r25	; 0x30
    205a:	8f a7       	std	Y+47, r24	; 0x2f
    205c:	0f c0       	rjmp	.+30     	; 0x207c <LCD_vInit+0x398>
    205e:	88 ec       	ldi	r24, 0xC8	; 200
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9e a7       	std	Y+46, r25	; 0x2e
    2064:	8d a7       	std	Y+45, r24	; 0x2d
    2066:	8d a5       	ldd	r24, Y+45	; 0x2d
    2068:	9e a5       	ldd	r25, Y+46	; 0x2e
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_vInit+0x386>
    206e:	9e a7       	std	Y+46, r25	; 0x2e
    2070:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8f a5       	ldd	r24, Y+47	; 0x2f
    2074:	98 a9       	ldd	r25, Y+48	; 0x30
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8f a5       	ldd	r24, Y+47	; 0x2f
    207e:	98 a9       	ldd	r25, Y+48	; 0x30
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <LCD_vInit+0x37a>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	69 a9       	ldd	r22, Y+49	; 0x31
    2088:	7a a9       	ldd	r23, Y+50	; 0x32
    208a:	8b a9       	ldd	r24, Y+51	; 0x33
    208c:	9c a9       	ldd	r25, Y+52	; 0x34
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	98 ab       	std	Y+48, r25	; 0x30
    2098:	8f a7       	std	Y+47, r24	; 0x2f
    209a:	8f a5       	ldd	r24, Y+47	; 0x2f
    209c:	98 a9       	ldd	r25, Y+48	; 0x30
    209e:	9c a7       	std	Y+44, r25	; 0x2c
    20a0:	8b a7       	std	Y+43, r24	; 0x2b
    20a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_vInit+0x3c2>
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    20ae:	8e e0       	ldi	r24, 0x0E	; 14
    20b0:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_vSend_cmd>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a0 e8       	ldi	r26, 0x80	; 128
    20ba:	bf e3       	ldi	r27, 0x3F	; 63
    20bc:	8f a3       	std	Y+39, r24	; 0x27
    20be:	98 a7       	std	Y+40, r25	; 0x28
    20c0:	a9 a7       	std	Y+41, r26	; 0x29
    20c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	6f a1       	ldd	r22, Y+39	; 0x27
    20c6:	78 a5       	ldd	r23, Y+40	; 0x28
    20c8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a ef       	ldi	r20, 0xFA	; 250
    20d2:	54 e4       	ldi	r21, 0x44	; 68
    20d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8b a3       	std	Y+35, r24	; 0x23
    20de:	9c a3       	std	Y+36, r25	; 0x24
    20e0:	ad a3       	std	Y+37, r26	; 0x25
    20e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20e4:	6b a1       	ldd	r22, Y+35	; 0x23
    20e6:	7c a1       	ldd	r23, Y+36	; 0x24
    20e8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ea:	9e a1       	ldd	r25, Y+38	; 0x26
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <LCD_vInit+0x422>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9a a3       	std	Y+34, r25	; 0x22
    2102:	89 a3       	std	Y+33, r24	; 0x21
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    2106:	6b a1       	ldd	r22, Y+35	; 0x23
    2108:	7c a1       	ldd	r23, Y+36	; 0x24
    210a:	8d a1       	ldd	r24, Y+37	; 0x25
    210c:	9e a1       	ldd	r25, Y+38	; 0x26
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	4c f5       	brge	.+82     	; 0x2170 <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	6f a1       	ldd	r22, Y+39	; 0x27
    2120:	78 a5       	ldd	r23, Y+40	; 0x28
    2122:	89 a5       	ldd	r24, Y+41	; 0x29
    2124:	9a a5       	ldd	r25, Y+42	; 0x2a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9a a3       	std	Y+34, r25	; 0x22
    2144:	89 a3       	std	Y+33, r24	; 0x21
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <LCD_vInit+0x482>
    2148:	88 ec       	ldi	r24, 0xC8	; 200
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	98 a3       	std	Y+32, r25	; 0x20
    214e:	8f 8f       	std	Y+31, r24	; 0x1f
    2150:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2152:	98 a1       	ldd	r25, Y+32	; 0x20
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_vInit+0x470>
    2158:	98 a3       	std	Y+32, r25	; 0x20
    215a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	89 a1       	ldd	r24, Y+33	; 0x21
    215e:	9a a1       	ldd	r25, Y+34	; 0x22
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9a a3       	std	Y+34, r25	; 0x22
    2164:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2166:	89 a1       	ldd	r24, Y+33	; 0x21
    2168:	9a a1       	ldd	r25, Y+34	; 0x22
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	69 f7       	brne	.-38     	; 0x2148 <LCD_vInit+0x464>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	6b a1       	ldd	r22, Y+35	; 0x23
    2172:	7c a1       	ldd	r23, Y+36	; 0x24
    2174:	8d a1       	ldd	r24, Y+37	; 0x25
    2176:	9e a1       	ldd	r25, Y+38	; 0x26
    2178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9a a3       	std	Y+34, r25	; 0x22
    2182:	89 a3       	std	Y+33, r24	; 0x21
    2184:	89 a1       	ldd	r24, Y+33	; 0x21
    2186:	9a a1       	ldd	r25, Y+34	; 0x22
    2188:	9e 8f       	std	Y+30, r25	; 0x1e
    218a:	8d 8f       	std	Y+29, r24	; 0x1d
    218c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_vInit+0x4ac>
    2194:	9e 8f       	std	Y+30, r25	; 0x1e
    2196:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_vSend_cmd>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e2       	ldi	r26, 0x20	; 32
    21a4:	b1 e4       	ldi	r27, 0x41	; 65
    21a6:	89 8f       	std	Y+25, r24	; 0x19
    21a8:	9a 8f       	std	Y+26, r25	; 0x1a
    21aa:	ab 8f       	std	Y+27, r26	; 0x1b
    21ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	69 8d       	ldd	r22, Y+25	; 0x19
    21b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a ef       	ldi	r20, 0xFA	; 250
    21bc:	54 e4       	ldi	r21, 0x44	; 68
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8d 8b       	std	Y+21, r24	; 0x15
    21c8:	9e 8b       	std	Y+22, r25	; 0x16
    21ca:	af 8b       	std	Y+23, r26	; 0x17
    21cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <LCD_vInit+0x50c>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9c 8b       	std	Y+20, r25	; 0x14
    21ec:	8b 8b       	std	Y+19, r24	; 0x13
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    21f0:	6d 89       	ldd	r22, Y+21	; 0x15
    21f2:	7e 89       	ldd	r23, Y+22	; 0x16
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	69 8d       	ldd	r22, Y+25	; 0x19
    220a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9c 8b       	std	Y+20, r25	; 0x14
    222e:	8b 8b       	std	Y+19, r24	; 0x13
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <LCD_vInit+0x56c>
    2232:	88 ec       	ldi	r24, 0xC8	; 200
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9a 8b       	std	Y+18, r25	; 0x12
    2238:	89 8b       	std	Y+17, r24	; 0x11
    223a:	89 89       	ldd	r24, Y+17	; 0x11
    223c:	9a 89       	ldd	r25, Y+18	; 0x12
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_vInit+0x55a>
    2242:	9a 8b       	std	Y+18, r25	; 0x12
    2244:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8b 89       	ldd	r24, Y+19	; 0x13
    2248:	9c 89       	ldd	r25, Y+20	; 0x14
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <LCD_vInit+0x54e>
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
    226e:	8b 89       	ldd	r24, Y+19	; 0x13
    2270:	9c 89       	ldd	r25, Y+20	; 0x14
    2272:	98 8b       	std	Y+16, r25	; 0x10
    2274:	8f 87       	std	Y+15, r24	; 0x0f
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	98 89       	ldd	r25, Y+16	; 0x10
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_vInit+0x596>
    227e:	98 8b       	std	Y+16, r25	; 0x10
    2280:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    2282:	86 e0       	ldi	r24, 0x06	; 6
    2284:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_vSend_cmd>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e8       	ldi	r26, 0x80	; 128
    228e:	bf e3       	ldi	r27, 0x3F	; 63
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    2292:	9c 87       	std	Y+12, r25	; 0x0c
    2294:	ad 87       	std	Y+13, r26	; 0x0d
    2296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
    22b4:	a9 87       	std	Y+9, r26	; 0x09
    22b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <LCD_vInit+0x5f6>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <LCD_vInit+0x674>
	else if (__tmp > 65535)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_vInit+0x656>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_vInit+0x644>
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <LCD_vInit+0x638>
    2342:	14 c0       	rjmp	.+40     	; 0x236c <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_vInit+0x680>
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    236c:	cc 5a       	subi	r28, 0xAC	; 172
    236e:	df 4f       	sbci	r29, 0xFF	; 255
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	08 95       	ret

00002384 <send_falling_edge>:


static void send_falling_edge(void)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	6c 97       	sbiw	r28, 0x1c	; 28
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    2398:	82 e4       	ldi	r24, 0x42	; 66
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e0       	ldi	r26, 0x00	; 0
    23a8:	b0 e4       	ldi	r27, 0x40	; 64
    23aa:	89 8f       	std	Y+25, r24	; 0x19
    23ac:	9a 8f       	std	Y+26, r25	; 0x1a
    23ae:	ab 8f       	std	Y+27, r26	; 0x1b
    23b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	69 8d       	ldd	r22, Y+25	; 0x19
    23b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a ef       	ldi	r20, 0xFA	; 250
    23c0:	54 e4       	ldi	r21, 0x44	; 68
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	8d 8b       	std	Y+21, r24	; 0x15
    23cc:	9e 8b       	std	Y+22, r25	; 0x16
    23ce:	af 8b       	std	Y+23, r26	; 0x17
    23d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d2:	6d 89       	ldd	r22, Y+21	; 0x15
    23d4:	7e 89       	ldd	r23, Y+22	; 0x16
    23d6:	8f 89       	ldd	r24, Y+23	; 0x17
    23d8:	98 8d       	ldd	r25, Y+24	; 0x18
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <send_falling_edge+0x70>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9c 8b       	std	Y+20, r25	; 0x14
    23f0:	8b 8b       	std	Y+19, r24	; 0x13
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    23f4:	6d 89       	ldd	r22, Y+21	; 0x15
    23f6:	7e 89       	ldd	r23, Y+22	; 0x16
    23f8:	8f 89       	ldd	r24, Y+23	; 0x17
    23fa:	98 8d       	ldd	r25, Y+24	; 0x18
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	69 8d       	ldd	r22, Y+25	; 0x19
    240e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <send_falling_edge+0xd0>
    2436:	88 ec       	ldi	r24, 0xC8	; 200
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9a 8b       	std	Y+18, r25	; 0x12
    243c:	89 8b       	std	Y+17, r24	; 0x11
    243e:	89 89       	ldd	r24, Y+17	; 0x11
    2440:	9a 89       	ldd	r25, Y+18	; 0x12
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <send_falling_edge+0xbe>
    2446:	9a 8b       	std	Y+18, r25	; 0x12
    2448:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	8b 89       	ldd	r24, Y+19	; 0x13
    244c:	9c 89       	ldd	r25, Y+20	; 0x14
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	9c 8b       	std	Y+20, r25	; 0x14
    2452:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <send_falling_edge+0xb2>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	6d 89       	ldd	r22, Y+21	; 0x15
    2460:	7e 89       	ldd	r23, Y+22	; 0x16
    2462:	8f 89       	ldd	r24, Y+23	; 0x17
    2464:	98 8d       	ldd	r25, Y+24	; 0x18
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9c 8b       	std	Y+20, r25	; 0x14
    2470:	8b 8b       	std	Y+19, r24	; 0x13
    2472:	8b 89       	ldd	r24, Y+19	; 0x13
    2474:	9c 89       	ldd	r25, Y+20	; 0x14
    2476:	98 8b       	std	Y+16, r25	; 0x10
    2478:	8f 87       	std	Y+15, r24	; 0x0f
    247a:	8f 85       	ldd	r24, Y+15	; 0x0f
    247c:	98 89       	ldd	r25, Y+16	; 0x10
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <send_falling_edge+0xfa>
    2482:	98 8b       	std	Y+16, r25	; 0x10
    2484:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('B',EN,0);
    2486:	82 e4       	ldi	r24, 0x42	; 66
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	b0 e4       	ldi	r27, 0x40	; 64
    2498:	8b 87       	std	Y+11, r24	; 0x0b
    249a:	9c 87       	std	Y+12, r25	; 0x0c
    249c:	ad 87       	std	Y+13, r26	; 0x0d
    249e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8f 83       	std	Y+7, r24	; 0x07
    24ba:	98 87       	std	Y+8, r25	; 0x08
    24bc:	a9 87       	std	Y+9, r26	; 0x09
    24be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <send_falling_edge+0x15e>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <send_falling_edge+0x1be>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <send_falling_edge+0x1ac>
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <send_falling_edge+0x1a0>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <send_falling_edge+0x1e8>
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2574:	6c 96       	adiw	r28, 0x1c	; 28
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	2f 97       	sbiw	r28, 0x0f	; 15
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
    259c:	8f 85       	ldd	r24, Y+15	; 0x0f
    259e:	98 2f       	mov	r25, r24
    25a0:	92 95       	swap	r25
    25a2:	9f 70       	andi	r25, 0x0F	; 15
    25a4:	81 e4       	ldi	r24, 0x41	; 65
    25a6:	69 2f       	mov	r22, r25
    25a8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <write_high_nibble>
	DIO_write('B',RS,0);
    25ac:	82 e4       	ldi	r24, 0x42	; 66
    25ae:	61 e0       	ldi	r22, 0x01	; 1
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge();
    25b6:	0e 94 c2 11 	call	0x2384	; 0x2384 <send_falling_edge>
	write_high_nibble('A',cmd);
    25ba:	81 e4       	ldi	r24, 0x41	; 65
    25bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    25be:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <write_high_nibble>
	DIO_write('B',RS,0);
    25c2:	82 e4       	ldi	r24, 0x42	; 66
    25c4:	61 e0       	ldi	r22, 0x01	; 1
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge();
    25cc:	0e 94 c2 11 	call	0x2384	; 0x2384 <send_falling_edge>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e8       	ldi	r26, 0x80	; 128
    25d6:	bf e3       	ldi	r27, 0x3F	; 63
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <LCD_vSend_cmd+0xfc>
    2664:	88 ec       	ldi	r24, 0xC8	; 200
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_vSend_cmd+0xea>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <LCD_vSend_cmd+0xde>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <LCD_vSend_cmd+0x126>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    26b4:	2f 96       	adiw	r28, 0x0f	; 15
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	2f 97       	sbiw	r28, 0x0f	; 15
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	98 2f       	mov	r25, r24
    26e0:	92 95       	swap	r25
    26e2:	9f 70       	andi	r25, 0x0F	; 15
    26e4:	81 e4       	ldi	r24, 0x41	; 65
    26e6:	69 2f       	mov	r22, r25
    26e8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <write_high_nibble>
	DIO_write('B',RS,1);
    26ec:	82 e4       	ldi	r24, 0x42	; 66
    26ee:	61 e0       	ldi	r22, 0x01	; 1
    26f0:	41 e0       	ldi	r20, 0x01	; 1
    26f2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge();
    26f6:	0e 94 c2 11 	call	0x2384	; 0x2384 <send_falling_edge>
	write_high_nibble('A',data);
    26fa:	81 e4       	ldi	r24, 0x41	; 65
    26fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    26fe:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <write_high_nibble>
	DIO_write('B',RS,1);
    2702:	82 e4       	ldi	r24, 0x42	; 66
    2704:	61 e0       	ldi	r22, 0x01	; 1
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge();
    270c:	0e 94 c2 11 	call	0x2384	; 0x2384 <send_falling_edge>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 e8       	ldi	r26, 0x80	; 128
    2716:	bf e3       	ldi	r27, 0x3F	; 63
    2718:	8b 87       	std	Y+11, r24	; 0x0b
    271a:	9c 87       	std	Y+12, r25	; 0x0c
    271c:	ad 87       	std	Y+13, r26	; 0x0d
    271e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8f 83       	std	Y+7, r24	; 0x07
    273a:	98 87       	std	Y+8, r25	; 0x08
    273c:	a9 87       	std	Y+9, r26	; 0x09
    273e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <LCD_vSend_char+0x9c>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    2762:	6f 81       	ldd	r22, Y+7	; 0x07
    2764:	78 85       	ldd	r23, Y+8	; 0x08
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6b 85       	ldd	r22, Y+11	; 0x0b
    277c:	7c 85       	ldd	r23, Y+12	; 0x0c
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <LCD_vSend_char+0xfc>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_vSend_char+0xea>
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <LCD_vSend_char+0xde>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <LCD_vSend_char+0x126>
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    27f4:	2f 96       	adiw	r28, 0x0f	; 15
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	00 d0       	rcall	.+0      	; 0x280c <LCD_vSend_string+0x6>
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	0a c0       	rjmp	.+20     	; 0x282a <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    2816:	e9 81       	ldd	r30, Y+1	; 0x01
    2818:	fa 81       	ldd	r31, Y+2	; 0x02
    281a:	80 81       	ld	r24, Z
    281c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <LCD_vSend_char>
		data++;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    282a:	e9 81       	ldd	r30, Y+1	; 0x01
    282c:	fa 81       	ldd	r31, Y+2	; 0x02
    282e:	80 81       	ld	r24, Z
    2830:	88 23       	and	r24, r24
    2832:	89 f7       	brne	.-30     	; 0x2816 <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <LCD_clearscreen>:
void LCD_clearscreen()
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	2e 97       	sbiw	r28, 0x0e	; 14
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_vSend_cmd>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e2       	ldi	r26, 0x20	; 32
    285e:	b1 e4       	ldi	r27, 0x41	; 65
    2860:	8b 87       	std	Y+11, r24	; 0x0b
    2862:	9c 87       	std	Y+12, r25	; 0x0c
    2864:	ad 87       	std	Y+13, r26	; 0x0d
    2866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a ef       	ldi	r20, 0xFA	; 250
    2876:	54 e4       	ldi	r21, 0x44	; 68
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	a9 87       	std	Y+9, r26	; 0x09
    2886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <LCD_clearscreen+0x6c>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <LCD_clearscreen+0xcc>
    28ec:	88 ec       	ldi	r24, 0xC8	; 200
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_clearscreen+0xba>
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <LCD_clearscreen+0xae>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_clearscreen+0xf6>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    293c:	2e 96       	adiw	r28, 0x0e	; 14
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	61 97       	sbiw	r28, 0x11	; 17
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	88 8b       	std	Y+16, r24	; 0x10
    2964:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    2966:	88 89       	ldd	r24, Y+16	; 0x10
    2968:	83 30       	cpi	r24, 0x03	; 3
    296a:	48 f4       	brcc	.+18     	; 0x297e <LCD_movecursor+0x30>
    296c:	88 89       	ldd	r24, Y+16	; 0x10
    296e:	88 23       	and	r24, r24
    2970:	31 f0       	breq	.+12     	; 0x297e <LCD_movecursor+0x30>
    2972:	89 89       	ldd	r24, Y+17	; 0x11
    2974:	81 31       	cpi	r24, 0x11	; 17
    2976:	18 f4       	brcc	.+6      	; 0x297e <LCD_movecursor+0x30>
    2978:	89 89       	ldd	r24, Y+17	; 0x11
    297a:	88 23       	and	r24, r24
    297c:	19 f4       	brne	.+6      	; 0x2984 <LCD_movecursor+0x36>
	{
		data=0x80;
    297e:	80 e8       	ldi	r24, 0x80	; 128
    2980:	8f 87       	std	Y+15, r24	; 0x0f
    2982:	0d c0       	rjmp	.+26     	; 0x299e <LCD_movecursor+0x50>
	}
	else if(row==1)
    2984:	88 89       	ldd	r24, Y+16	; 0x10
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	21 f4       	brne	.+8      	; 0x2992 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    298a:	89 89       	ldd	r24, Y+17	; 0x11
    298c:	81 58       	subi	r24, 0x81	; 129
    298e:	8f 87       	std	Y+15, r24	; 0x0f
    2990:	06 c0       	rjmp	.+12     	; 0x299e <LCD_movecursor+0x50>
	}
	else if (row==2)
    2992:	88 89       	ldd	r24, Y+16	; 0x10
    2994:	82 30       	cpi	r24, 0x02	; 2
    2996:	19 f4       	brne	.+6      	; 0x299e <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    2998:	89 89       	ldd	r24, Y+17	; 0x11
    299a:	81 54       	subi	r24, 0x41	; 65
    299c:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    299e:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a0:	0e 94 c3 12 	call	0x2586	; 0x2586 <LCD_vSend_cmd>
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a0 e8       	ldi	r26, 0x80	; 128
    29aa:	bf e3       	ldi	r27, 0x3F	; 63
    29ac:	8b 87       	std	Y+11, r24	; 0x0b
    29ae:	9c 87       	std	Y+12, r25	; 0x0c
    29b0:	ad 87       	std	Y+13, r26	; 0x0d
    29b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	4a ef       	ldi	r20, 0xFA	; 250
    29c2:	54 e4       	ldi	r21, 0x44	; 68
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	8f 83       	std	Y+7, r24	; 0x07
    29ce:	98 87       	std	Y+8, r25	; 0x08
    29d0:	a9 87       	std	Y+9, r26	; 0x09
    29d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d4:	6f 81       	ldd	r22, Y+7	; 0x07
    29d6:	78 85       	ldd	r23, Y+8	; 0x08
    29d8:	89 85       	ldd	r24, Y+9	; 0x09
    29da:	9a 85       	ldd	r25, Y+10	; 0x0a
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e8       	ldi	r20, 0x80	; 128
    29e2:	5f e3       	ldi	r21, 0x3F	; 63
    29e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e8:	88 23       	and	r24, r24
    29ea:	2c f4       	brge	.+10     	; 0x29f6 <LCD_movecursor+0xa8>
		__ticks = 1;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	3f c0       	rjmp	.+126    	; 0x2a74 <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    29f6:	6f 81       	ldd	r22, Y+7	; 0x07
    29f8:	78 85       	ldd	r23, Y+8	; 0x08
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	4f e7       	ldi	r20, 0x7F	; 127
    2a04:	57 e4       	ldi	r21, 0x47	; 71
    2a06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0a:	18 16       	cp	r1, r24
    2a0c:	4c f5       	brge	.+82     	; 0x2a60 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e2       	ldi	r20, 0x20	; 32
    2a1c:	51 e4       	ldi	r21, 0x41	; 65
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	0f c0       	rjmp	.+30     	; 0x2a56 <LCD_movecursor+0x108>
    2a38:	88 ec       	ldi	r24, 0xC8	; 200
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LCD_movecursor+0xf6>
    2a48:	9c 83       	std	Y+4, r25	; 0x04
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <LCD_movecursor+0xea>
    2a5e:	14 c0       	rjmp	.+40     	; 0x2a88 <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_movecursor+0x132>
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2a88:	61 96       	adiw	r28, 0x11	; 17
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <BUZZ_Init>:
 */

#include "DIO.h"
#include "buzzer.h"

void BUZZ_Init() {
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
	DIO_vsetPINDir('C',1,1 );
    2aa2:	83 e4       	ldi	r24, 0x43	; 67
    2aa4:	61 e0       	ldi	r22, 0x01	; 1
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>

}
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <BUZZ_On>:

void BUZZ_On() {
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
	DIO_write('C',1,1);
    2aba:	83 e4       	ldi	r24, 0x43	; 67
    2abc:	61 e0       	ldi	r22, 0x01	; 1
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>

}
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <BUZZ_Off>:

void BUZZ_Off() {
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
	DIO_write('C',1,0);
    2ad2:	83 e4       	ldi	r24, 0x43	; 67
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <main>:
#include <avr/io.h>
#include "ULTRA.h"

#include <util/delay.h>
int main(void)
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
	LCD_vInit();
    2aea:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_vInit>
	BUZZ_Init();
    2aee:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <BUZZ_Init>

	DIO_vsetPINDir('D',7,1);
    2af2:	84 e4       	ldi	r24, 0x44	; 68
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	67 e0       	ldi	r22, 0x07	; 7
    2af8:	70 e0       	ldi	r23, 0x00	; 0
    2afa:	41 e0       	ldi	r20, 0x01	; 1
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
    while(1)
    {	

        ULTEA_CON();
    2b02:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <ULTEA_CON>
    2b06:	fd cf       	rjmp	.-6      	; 0x2b02 <main+0x20>

00002b08 <__mulsi3>:
    2b08:	62 9f       	mul	r22, r18
    2b0a:	d0 01       	movw	r26, r0
    2b0c:	73 9f       	mul	r23, r19
    2b0e:	f0 01       	movw	r30, r0
    2b10:	82 9f       	mul	r24, r18
    2b12:	e0 0d       	add	r30, r0
    2b14:	f1 1d       	adc	r31, r1
    2b16:	64 9f       	mul	r22, r20
    2b18:	e0 0d       	add	r30, r0
    2b1a:	f1 1d       	adc	r31, r1
    2b1c:	92 9f       	mul	r25, r18
    2b1e:	f0 0d       	add	r31, r0
    2b20:	83 9f       	mul	r24, r19
    2b22:	f0 0d       	add	r31, r0
    2b24:	74 9f       	mul	r23, r20
    2b26:	f0 0d       	add	r31, r0
    2b28:	65 9f       	mul	r22, r21
    2b2a:	f0 0d       	add	r31, r0
    2b2c:	99 27       	eor	r25, r25
    2b2e:	72 9f       	mul	r23, r18
    2b30:	b0 0d       	add	r27, r0
    2b32:	e1 1d       	adc	r30, r1
    2b34:	f9 1f       	adc	r31, r25
    2b36:	63 9f       	mul	r22, r19
    2b38:	b0 0d       	add	r27, r0
    2b3a:	e1 1d       	adc	r30, r1
    2b3c:	f9 1f       	adc	r31, r25
    2b3e:	bd 01       	movw	r22, r26
    2b40:	cf 01       	movw	r24, r30
    2b42:	11 24       	eor	r1, r1
    2b44:	08 95       	ret

00002b46 <__udivmodhi4>:
    2b46:	aa 1b       	sub	r26, r26
    2b48:	bb 1b       	sub	r27, r27
    2b4a:	51 e1       	ldi	r21, 0x11	; 17
    2b4c:	07 c0       	rjmp	.+14     	; 0x2b5c <__udivmodhi4_ep>

00002b4e <__udivmodhi4_loop>:
    2b4e:	aa 1f       	adc	r26, r26
    2b50:	bb 1f       	adc	r27, r27
    2b52:	a6 17       	cp	r26, r22
    2b54:	b7 07       	cpc	r27, r23
    2b56:	10 f0       	brcs	.+4      	; 0x2b5c <__udivmodhi4_ep>
    2b58:	a6 1b       	sub	r26, r22
    2b5a:	b7 0b       	sbc	r27, r23

00002b5c <__udivmodhi4_ep>:
    2b5c:	88 1f       	adc	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	5a 95       	dec	r21
    2b62:	a9 f7       	brne	.-22     	; 0x2b4e <__udivmodhi4_loop>
    2b64:	80 95       	com	r24
    2b66:	90 95       	com	r25
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	08 95       	ret

00002b6e <__udivmodsi4>:
    2b6e:	a1 e2       	ldi	r26, 0x21	; 33
    2b70:	1a 2e       	mov	r1, r26
    2b72:	aa 1b       	sub	r26, r26
    2b74:	bb 1b       	sub	r27, r27
    2b76:	fd 01       	movw	r30, r26
    2b78:	0d c0       	rjmp	.+26     	; 0x2b94 <__udivmodsi4_ep>

00002b7a <__udivmodsi4_loop>:
    2b7a:	aa 1f       	adc	r26, r26
    2b7c:	bb 1f       	adc	r27, r27
    2b7e:	ee 1f       	adc	r30, r30
    2b80:	ff 1f       	adc	r31, r31
    2b82:	a2 17       	cp	r26, r18
    2b84:	b3 07       	cpc	r27, r19
    2b86:	e4 07       	cpc	r30, r20
    2b88:	f5 07       	cpc	r31, r21
    2b8a:	20 f0       	brcs	.+8      	; 0x2b94 <__udivmodsi4_ep>
    2b8c:	a2 1b       	sub	r26, r18
    2b8e:	b3 0b       	sbc	r27, r19
    2b90:	e4 0b       	sbc	r30, r20
    2b92:	f5 0b       	sbc	r31, r21

00002b94 <__udivmodsi4_ep>:
    2b94:	66 1f       	adc	r22, r22
    2b96:	77 1f       	adc	r23, r23
    2b98:	88 1f       	adc	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	1a 94       	dec	r1
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <__udivmodsi4_loop>
    2ba0:	60 95       	com	r22
    2ba2:	70 95       	com	r23
    2ba4:	80 95       	com	r24
    2ba6:	90 95       	com	r25
    2ba8:	9b 01       	movw	r18, r22
    2baa:	ac 01       	movw	r20, r24
    2bac:	bd 01       	movw	r22, r26
    2bae:	cf 01       	movw	r24, r30
    2bb0:	08 95       	ret

00002bb2 <__prologue_saves__>:
    2bb2:	2f 92       	push	r2
    2bb4:	3f 92       	push	r3
    2bb6:	4f 92       	push	r4
    2bb8:	5f 92       	push	r5
    2bba:	6f 92       	push	r6
    2bbc:	7f 92       	push	r7
    2bbe:	8f 92       	push	r8
    2bc0:	9f 92       	push	r9
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	cf 92       	push	r12
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	ca 1b       	sub	r28, r26
    2bdc:	db 0b       	sbc	r29, r27
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	09 94       	ijmp

00002bea <__epilogue_restores__>:
    2bea:	2a 88       	ldd	r2, Y+18	; 0x12
    2bec:	39 88       	ldd	r3, Y+17	; 0x11
    2bee:	48 88       	ldd	r4, Y+16	; 0x10
    2bf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bfc:	b9 84       	ldd	r11, Y+9	; 0x09
    2bfe:	c8 84       	ldd	r12, Y+8	; 0x08
    2c00:	df 80       	ldd	r13, Y+7	; 0x07
    2c02:	ee 80       	ldd	r14, Y+6	; 0x06
    2c04:	fd 80       	ldd	r15, Y+5	; 0x05
    2c06:	0c 81       	ldd	r16, Y+4	; 0x04
    2c08:	1b 81       	ldd	r17, Y+3	; 0x03
    2c0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c0c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c0e:	ce 0f       	add	r28, r30
    2c10:	d1 1d       	adc	r29, r1
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	ed 01       	movw	r28, r26
    2c1e:	08 95       	ret

00002c20 <_exit>:
    2c20:	f8 94       	cli

00002c22 <__stop_program>:
    2c22:	ff cf       	rjmp	.-2      	; 0x2c22 <__stop_program>
